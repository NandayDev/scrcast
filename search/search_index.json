{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"api/library/","text":"library Packages \u00b6 Name Summary dev.bmcreations.scrcast dev.bmcreations.scrcast.config dev.bmcreations.scrcast.extensions dev.bmcreations.scrcast.recorder dev.bmcreations.scrcast.recorder.notification Index \u00b6 All Types","title":"scrcast"},{"location":"api/library/#packages","text":"Name Summary dev.bmcreations.scrcast dev.bmcreations.scrcast.config dev.bmcreations.scrcast.extensions dev.bmcreations.scrcast.recorder dev.bmcreations.scrcast.recorder.notification","title":"Packages"},{"location":"api/library/#index","text":"All Types","title":"Index"},{"location":"api/library/alltypes/","text":"All Types \u00b6 Name Summary dev.bmcreations.scrcast.config.ChannelConfig \u00b6 An immutable data class representing configuration options for the notification channel of the recording notifications. | dev.bmcreations.scrcast.config.FileFormatter \u00b6 Type alias foe the StorageConfig.fileNameFormatter lambda. | dev.bmcreations.scrcast.config.NotificationConfig \u00b6 An immutable data class representing configuration options for the notification presented from the foreground service. | dev.bmcreations.scrcast.recorder.notification.NotificationProvider \u00b6 Provider contract for managing the recording notification used by ScrCast | dev.bmcreations.scrcast.config.Options \u00b6 An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. | dev.bmcreations.scrcast.recorder.RecordingCallbacks \u00b6 Callback for RecordingState changes during a recording session. | dev.bmcreations.scrcast.recorder.RecordingState \u00b6 Explicit defined state's during a recording session via ScrCast | dev.bmcreations.scrcast.ScrCast \u00b6 Main Interface for accessing ScrCast Library | dev.bmcreations.scrcast.config.StorageConfig \u00b6 An immutable data class representing configuration options for the storage of the output file. | dev.bmcreations.scrcast.config.VideoConfig \u00b6 An immutable data class representing configuration options for the recording.","title":"Index"},{"location":"api/library/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/library/alltypes/#devbmcreationsscrcastconfigchannelconfig","text":"An immutable data class representing configuration options for the notification channel of the recording notifications. |","title":"dev.bmcreations.scrcast.config.ChannelConfig"},{"location":"api/library/alltypes/#devbmcreationsscrcastconfigfileformatter","text":"Type alias foe the StorageConfig.fileNameFormatter lambda. |","title":"dev.bmcreations.scrcast.config.FileFormatter"},{"location":"api/library/alltypes/#devbmcreationsscrcastconfignotificationconfig","text":"An immutable data class representing configuration options for the notification presented from the foreground service. |","title":"dev.bmcreations.scrcast.config.NotificationConfig"},{"location":"api/library/alltypes/#devbmcreationsscrcastrecordernotificationnotificationprovider","text":"Provider contract for managing the recording notification used by ScrCast |","title":"dev.bmcreations.scrcast.recorder.notification.NotificationProvider"},{"location":"api/library/alltypes/#devbmcreationsscrcastconfigoptions","text":"An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. |","title":"dev.bmcreations.scrcast.config.Options"},{"location":"api/library/alltypes/#devbmcreationsscrcastrecorderrecordingcallbacks","text":"Callback for RecordingState changes during a recording session. |","title":"dev.bmcreations.scrcast.recorder.RecordingCallbacks"},{"location":"api/library/alltypes/#devbmcreationsscrcastrecorderrecordingstate","text":"Explicit defined state's during a recording session via ScrCast |","title":"dev.bmcreations.scrcast.recorder.RecordingState"},{"location":"api/library/alltypes/#devbmcreationsscrcastscrcast","text":"Main Interface for accessing ScrCast Library |","title":"dev.bmcreations.scrcast.ScrCast"},{"location":"api/library/alltypes/#devbmcreationsscrcastconfigstorageconfig","text":"An immutable data class representing configuration options for the storage of the output file. |","title":"dev.bmcreations.scrcast.config.StorageConfig"},{"location":"api/library/alltypes/#devbmcreationsscrcastconfigvideoconfig","text":"An immutable data class representing configuration options for the recording.","title":"dev.bmcreations.scrcast.config.VideoConfig"},{"location":"api/library/dev.bmcreations.scrcast/","text":"library / dev.bmcreations.scrcast Package dev.bmcreations.scrcast \u00b6 Types \u00b6 Name Summary ScrCast Main Interface for accessing ScrCast Library class ScrCast","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast/#package-devbmcreationsscrcast","text":"","title":"Package dev.bmcreations.scrcast"},{"location":"api/library/dev.bmcreations.scrcast/#types","text":"Name Summary ScrCast Main Interface for accessing ScrCast Library class ScrCast","title":"Types"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/","text":"library / dev.bmcreations.scrcast / ScrCast ScrCast \u00b6 class ScrCast Main Interface for accessing ScrCast Library Properties \u00b6 Name Summary options Current Options for this instance. var options: Options state The current RecordingState of the recorder var state: RecordingState Functions \u00b6 Name Summary hasStoragePermissions Convenience method for clients to easily check if the required permissions are enabled for storage Even though we internally will bubble up the permission request and handle the allow/deny, some clients may want to onboard users via an OOBE or some UX state involving previously recorded files. fun hasStoragePermissions(): Boolean onRecordingComplete Set an explicit output file listener, as a kotlin lambda. fun onRecordingComplete(callback: RecordingOutputFileCallback): Unit onRecordingStateChange Set an explicit state change listener, as a kotlin lambda, emitting changes of RecordingState as they occur. fun onRecordingStateChange(callback: RecordingStateChangeCallback): Unit options Updates the configurations of ScrCast via a DSL. fun options(opts: OptionsBuilder.() -> Unit ): Unit pause Pauses a recording session that was started via record fun pause(): Unit record Triggers a recording session based on the configuration's defined by options fun record(): Unit resume Resumed a recording session that was paused via pause , or triggers a new recording if the state is not paused. fun resume(): Unit setNotificationProvider Set the NotificationProvider for the ScrCast instance. fun setNotificationProvider(provider: NotificationProvider ): Unit setRecordingCallback Set the recording callbacks, emitting changes of RecordingState as they occur and a link to the output File fun setRecordingCallback(listener: RecordingCallbacks ?): Unit stopRecording Triggers the end to a recording session that was started via record fun stopRecording(): Unit updateOptions Updates the configurations of ScrCast . fun updateOptions(options: Options ): Unit Companion Object Functions \u00b6 Name Summary use Instance creator for ScrCast . fun use(activity: ComponentActivity): ScrCast","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/#scrcast","text":"class ScrCast Main Interface for accessing ScrCast Library","title":"ScrCast"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/#properties","text":"Name Summary options Current Options for this instance. var options: Options state The current RecordingState of the recorder var state: RecordingState","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/#functions","text":"Name Summary hasStoragePermissions Convenience method for clients to easily check if the required permissions are enabled for storage Even though we internally will bubble up the permission request and handle the allow/deny, some clients may want to onboard users via an OOBE or some UX state involving previously recorded files. fun hasStoragePermissions(): Boolean onRecordingComplete Set an explicit output file listener, as a kotlin lambda. fun onRecordingComplete(callback: RecordingOutputFileCallback): Unit onRecordingStateChange Set an explicit state change listener, as a kotlin lambda, emitting changes of RecordingState as they occur. fun onRecordingStateChange(callback: RecordingStateChangeCallback): Unit options Updates the configurations of ScrCast via a DSL. fun options(opts: OptionsBuilder.() -> Unit ): Unit pause Pauses a recording session that was started via record fun pause(): Unit record Triggers a recording session based on the configuration's defined by options fun record(): Unit resume Resumed a recording session that was paused via pause , or triggers a new recording if the state is not paused. fun resume(): Unit setNotificationProvider Set the NotificationProvider for the ScrCast instance. fun setNotificationProvider(provider: NotificationProvider ): Unit setRecordingCallback Set the recording callbacks, emitting changes of RecordingState as they occur and a link to the output File fun setRecordingCallback(listener: RecordingCallbacks ?): Unit stopRecording Triggers the end to a recording session that was started via record fun stopRecording(): Unit updateOptions Updates the configurations of ScrCast . fun updateOptions(options: Options ): Unit","title":"Functions"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/#companion-object-functions","text":"Name Summary use Instance creator for ScrCast . fun use(activity: ComponentActivity): ScrCast","title":"Companion Object Functions"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/has-storage-permissions/","text":"library / dev.bmcreations.scrcast / ScrCast / hasStoragePermissions hasStoragePermissions \u00b6 fun hasStoragePermissions(): Boolean Convenience method for clients to easily check if the required permissions are enabled for storage Even though we internally will bubble up the permission request and handle the allow/deny, some clients may want to onboard users via an OOBE or some UX state involving previously recorded files.","title":"Has storage permissions"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/has-storage-permissions/#hasstoragepermissions","text":"fun hasStoragePermissions(): Boolean Convenience method for clients to easily check if the required permissions are enabled for storage Even though we internally will bubble up the permission request and handle the allow/deny, some clients may want to onboard users via an OOBE or some UX state involving previously recorded files.","title":"hasStoragePermissions"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/on-recording-complete/","text":"library / dev.bmcreations.scrcast / ScrCast / onRecordingComplete onRecordingComplete \u00b6 fun onRecordingComplete(callback: RecordingOutputFileCallback): Unit Set an explicit output file listener, as a kotlin lambda. This is an alternative to providing the combined RecordingCallbacks if you are only interested in the output file or want to define them independently. This method is not accessible to the JVM.","title":"On recording complete"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/on-recording-complete/#onrecordingcomplete","text":"fun onRecordingComplete(callback: RecordingOutputFileCallback): Unit Set an explicit output file listener, as a kotlin lambda. This is an alternative to providing the combined RecordingCallbacks if you are only interested in the output file or want to define them independently. This method is not accessible to the JVM.","title":"onRecordingComplete"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/on-recording-state-change/","text":"library / dev.bmcreations.scrcast / ScrCast / onRecordingStateChange onRecordingStateChange \u00b6 fun onRecordingStateChange(callback: RecordingStateChangeCallback): Unit Set an explicit state change listener, as a kotlin lambda, emitting changes of RecordingState as they occur. This is an alternative to providing the combined RecordingCallbacks if you are only interested in state changes or want to define them independently. This method is not accessible to the JVM.","title":"On recording state change"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/on-recording-state-change/#onrecordingstatechange","text":"fun onRecordingStateChange(callback: RecordingStateChangeCallback): Unit Set an explicit state change listener, as a kotlin lambda, emitting changes of RecordingState as they occur. This is an alternative to providing the combined RecordingCallbacks if you are only interested in state changes or want to define them independently. This method is not accessible to the JVM.","title":"onRecordingStateChange"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/options/","text":"library / dev.bmcreations.scrcast / ScrCast / options options \u00b6 var options: Options Current Options for this instance. Available for client read/write persistence for user defaults. See Also options updateOptions Options fun options(opts: OptionsBuilder.() -> Unit ): Unit Updates the configurations of ScrCast via a DSL. See Also Options","title":"Options"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/options/#options","text":"var options: Options Current Options for this instance. Available for client read/write persistence for user defaults. See Also options updateOptions Options fun options(opts: OptionsBuilder.() -> Unit ): Unit Updates the configurations of ScrCast via a DSL. See Also Options","title":"options"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/pause/","text":"library / dev.bmcreations.scrcast / ScrCast / pause pause \u00b6 fun pause(): Unit Pauses a recording session that was started via record This only invokes a change to the recording state if the target device is Build.VERSION_CODES.N or higher. See Also MediaRecorder.pause","title":"Pause"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/pause/#pause","text":"fun pause(): Unit Pauses a recording session that was started via record This only invokes a change to the recording state if the target device is Build.VERSION_CODES.N or higher. See Also MediaRecorder.pause","title":"pause"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/record/","text":"library / dev.bmcreations.scrcast / ScrCast / record record \u00b6 fun record(): Unit Triggers a recording session based on the configuration's defined by options See Also updateOptions Options MediaRecorder.start","title":"Record"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/record/#record","text":"fun record(): Unit Triggers a recording session based on the configuration's defined by options See Also updateOptions Options MediaRecorder.start","title":"record"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/resume/","text":"library / dev.bmcreations.scrcast / ScrCast / resume resume \u00b6 fun resume(): Unit Resumed a recording session that was paused via pause , or triggers a new recording if the state is not paused. This only invokes a change to the recording state if the target device is Build.VERSION_CODES.N or higher. See Also MediaRecorder.resume","title":"Resume"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/resume/#resume","text":"fun resume(): Unit Resumed a recording session that was paused via pause , or triggers a new recording if the state is not paused. This only invokes a change to the recording state if the target device is Build.VERSION_CODES.N or higher. See Also MediaRecorder.resume","title":"resume"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/set-notification-provider/","text":"library / dev.bmcreations.scrcast / ScrCast / setNotificationProvider setNotificationProvider \u00b6 fun setNotificationProvider(provider: NotificationProvider ): Unit Set the NotificationProvider for the ScrCast instance. See Also NotificationProvider","title":"Set notification provider"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/set-notification-provider/#setnotificationprovider","text":"fun setNotificationProvider(provider: NotificationProvider ): Unit Set the NotificationProvider for the ScrCast instance. See Also NotificationProvider","title":"setNotificationProvider"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/set-recording-callback/","text":"library / dev.bmcreations.scrcast / ScrCast / setRecordingCallback setRecordingCallback \u00b6 fun setRecordingCallback(listener: RecordingCallbacks ?): Unit Set the recording callbacks, emitting changes of RecordingState as they occur and a link to the output File","title":"Set recording callback"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/set-recording-callback/#setrecordingcallback","text":"fun setRecordingCallback(listener: RecordingCallbacks ?): Unit Set the recording callbacks, emitting changes of RecordingState as they occur and a link to the output File","title":"setRecordingCallback"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/state/","text":"library / dev.bmcreations.scrcast / ScrCast / state state \u00b6 var state: RecordingState The current RecordingState of the recorder See Also RecordingState","title":"State"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/state/#state","text":"var state: RecordingState The current RecordingState of the recorder See Also RecordingState","title":"state"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/stop-recording/","text":"library / dev.bmcreations.scrcast / ScrCast / stopRecording stopRecording \u00b6 fun stopRecording(): Unit Triggers the end to a recording session that was started via record See Also MediaRecorder.stop","title":"Stop recording"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/stop-recording/#stoprecording","text":"fun stopRecording(): Unit Triggers the end to a recording session that was started via record See Also MediaRecorder.stop","title":"stopRecording"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/update-options/","text":"library / dev.bmcreations.scrcast / ScrCast / updateOptions updateOptions \u00b6 fun updateOptions(options: Options ): Unit Updates the configurations of ScrCast . See Also Options","title":"Update options"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/update-options/#updateoptions","text":"fun updateOptions(options: Options ): Unit Updates the configurations of ScrCast . See Also Options","title":"updateOptions"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/use/","text":"library / dev.bmcreations.scrcast / ScrCast / use use \u00b6 @JvmStatic fun use(activity: ComponentActivity): ScrCast Instance creator for ScrCast . Requires an Activity reference for media projection creation, as well as auto video-sizing in Options . See Also Options.video","title":"Use"},{"location":"api/library/dev.bmcreations.scrcast/-scr-cast/use/#use","text":"@JvmStatic fun use(activity: ComponentActivity): ScrCast Instance creator for ScrCast . Requires an Activity reference for media projection creation, as well as auto video-sizing in Options . See Also Options.video","title":"use"},{"location":"api/library/dev.bmcreations.scrcast.config/","text":"library / dev.bmcreations.scrcast.config Package dev.bmcreations.scrcast.config \u00b6 Types \u00b6 Name Summary ChannelConfig An immutable data class representing configuration options for the notification channel of the recording notifications. data class ChannelConfig : Parcelable FileFormatter Type alias foe the StorageConfig.fileNameFormatter lambda. typealias FileFormatter = () -> String NotificationConfig An immutable data class representing configuration options for the notification presented from the foreground service. data class NotificationConfig : Parcelable Options An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. data class Options : Parcelable StorageConfig An immutable data class representing configuration options for the storage of the output file. data class StorageConfig : Parcelable VideoConfig An immutable data class representing configuration options for the recording. data class VideoConfig : Parcelable","title":"config"},{"location":"api/library/dev.bmcreations.scrcast.config/#package-devbmcreationsscrcastconfig","text":"","title":"Package dev.bmcreations.scrcast.config"},{"location":"api/library/dev.bmcreations.scrcast.config/#types","text":"Name Summary ChannelConfig An immutable data class representing configuration options for the notification channel of the recording notifications. data class ChannelConfig : Parcelable FileFormatter Type alias foe the StorageConfig.fileNameFormatter lambda. typealias FileFormatter = () -> String NotificationConfig An immutable data class representing configuration options for the notification presented from the foreground service. data class NotificationConfig : Parcelable Options An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. data class Options : Parcelable StorageConfig An immutable data class representing configuration options for the storage of the output file. data class StorageConfig : Parcelable VideoConfig An immutable data class representing configuration options for the recording. data class VideoConfig : Parcelable","title":"Types"},{"location":"api/library/dev.bmcreations.scrcast.config/-file-formatter/","text":"library / dev.bmcreations.scrcast.config / FileFormatter FileFormatter \u00b6 typealias FileFormatter = () -> String Type alias foe the StorageConfig.fileNameFormatter lambda.","title":" file formatter"},{"location":"api/library/dev.bmcreations.scrcast.config/-file-formatter/#fileformatter","text":"typealias FileFormatter = () -> String Type alias foe the StorageConfig.fileNameFormatter lambda.","title":"FileFormatter"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/","text":"library / dev.bmcreations.scrcast.config / ChannelConfig ChannelConfig \u00b6 data class ChannelConfig : Parcelable An immutable data class representing configuration options for the notification channel of the recording notifications. See Also NotificationChannel Constructors \u00b6 Name Summary <init> An immutable data class representing configuration options for the notification channel of the recording notifications. ChannelConfig(id: String = \"1337\", name: String = \"Recording Service\", lightColor: Int = Color.BLUE, lockscreenVisibility: Int = Notification.VISIBILITY_PRIVATE) Properties \u00b6 Name Summary id The unique identifier for the notification channel val id: String lightColor The LED color to used when this notification presents itself val lightColor: Int lockscreenVisibility The visibility restrictions for the notifications in this channel. val lockscreenVisibility: Int name The name for the notification channel val name: String","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/#channelconfig","text":"data class ChannelConfig : Parcelable An immutable data class representing configuration options for the notification channel of the recording notifications. See Also NotificationChannel","title":"ChannelConfig"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/#constructors","text":"Name Summary <init> An immutable data class representing configuration options for the notification channel of the recording notifications. ChannelConfig(id: String = \"1337\", name: String = \"Recording Service\", lightColor: Int = Color.BLUE, lockscreenVisibility: Int = Notification.VISIBILITY_PRIVATE)","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/#properties","text":"Name Summary id The unique identifier for the notification channel val id: String lightColor The LED color to used when this notification presents itself val lightColor: Int lockscreenVisibility The visibility restrictions for the notifications in this channel. val lockscreenVisibility: Int name The name for the notification channel val name: String","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/-init-/","text":"library / dev.bmcreations.scrcast.config / ChannelConfig / <init> <init> \u00b6 ChannelConfig(id: String = \"1337\", name: String = \"Recording Service\", lightColor: Int = Color.BLUE, lockscreenVisibility: Int = Notification.VISIBILITY_PRIVATE) An immutable data class representing configuration options for the notification channel of the recording notifications. See Also NotificationChannel","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/-init-/#init","text":"ChannelConfig(id: String = \"1337\", name: String = \"Recording Service\", lightColor: Int = Color.BLUE, lockscreenVisibility: Int = Notification.VISIBILITY_PRIVATE) An immutable data class representing configuration options for the notification channel of the recording notifications. See Also NotificationChannel","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/id/","text":"library / dev.bmcreations.scrcast.config / ChannelConfig / id id \u00b6 val id: String The unique identifier for the notification channel See Also NotificationChannel","title":"Id"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/id/#id","text":"val id: String The unique identifier for the notification channel See Also NotificationChannel","title":"id"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/light-color/","text":"library / dev.bmcreations.scrcast.config / ChannelConfig / lightColor lightColor \u00b6 val lightColor: Int The LED color to used when this notification presents itself See Also NotificationChannel","title":"Light color"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/light-color/#lightcolor","text":"val lightColor: Int The LED color to used when this notification presents itself See Also NotificationChannel","title":"lightColor"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/lockscreen-visibility/","text":"library / dev.bmcreations.scrcast.config / ChannelConfig / lockscreenVisibility lockscreenVisibility \u00b6 val lockscreenVisibility: Int The visibility restrictions for the notifications in this channel. See Also NotificationChannel Notification.VISIBILITY_PRIVATE Notification.VISIBILITY_PUBLIC Notification.VISIBILITY_SECRET","title":"Lockscreen visibility"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/lockscreen-visibility/#lockscreenvisibility","text":"val lockscreenVisibility: Int The visibility restrictions for the notifications in this channel. See Also NotificationChannel Notification.VISIBILITY_PRIVATE Notification.VISIBILITY_PUBLIC Notification.VISIBILITY_SECRET","title":"lockscreenVisibility"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/name/","text":"library / dev.bmcreations.scrcast.config / ChannelConfig / name name \u00b6 val name: String The name for the notification channel See Also NotificationChannel","title":"Name"},{"location":"api/library/dev.bmcreations.scrcast.config/-channel-config/name/#name","text":"val name: String The name for the notification channel See Also NotificationChannel","title":"name"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig NotificationConfig \u00b6 data class NotificationConfig : Parcelable An immutable data class representing configuration options for the notification presented from the foreground service. Constructors \u00b6 Name Summary <init> An immutable data class representing configuration options for the notification presented from the foreground service. NotificationConfig(title: String = \"Recording screen\", description: String = \"\", icon: Bitmap ? = null, id: Int = 101, showStop: Boolean = false, showPause: Boolean = false, showTimer: Boolean = false, useMediaStyle: Boolean = false, accentColor: Int = R.color.recorder_notification_background, colorAsBackground: Boolean = true, channel: ChannelConfig = ChannelConfig()) Properties \u00b6 Name Summary accentColor The accent color resource for the notification val accentColor: Int channel val channel: ChannelConfig colorAsBackground When enabled the notification will use accentColor as the background. val colorAsBackground: Boolean description The message/description displayed in the notification val description: String icon The icon displayed in the notification val icon: Bitmap ? id The unique identifier for the displayed notification val id: Int showPause Whether to add a notification action for pause/resume of the current recording (visible action is dependent on the state of the current recording session). val showPause: Boolean showStop Whether to add a notification action for stopping the current recording. val showStop: Boolean showTimer Whether to add a the current recording time to the notification via a chronometer. val showTimer: Boolean title The title displayed in the notification val title: String useMediaStyle Whether to have pause/resume and stop actions show as media style icons val useMediaStyle: Boolean","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/#notificationconfig","text":"data class NotificationConfig : Parcelable An immutable data class representing configuration options for the notification presented from the foreground service.","title":"NotificationConfig"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/#constructors","text":"Name Summary <init> An immutable data class representing configuration options for the notification presented from the foreground service. NotificationConfig(title: String = \"Recording screen\", description: String = \"\", icon: Bitmap ? = null, id: Int = 101, showStop: Boolean = false, showPause: Boolean = false, showTimer: Boolean = false, useMediaStyle: Boolean = false, accentColor: Int = R.color.recorder_notification_background, colorAsBackground: Boolean = true, channel: ChannelConfig = ChannelConfig())","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/#properties","text":"Name Summary accentColor The accent color resource for the notification val accentColor: Int channel val channel: ChannelConfig colorAsBackground When enabled the notification will use accentColor as the background. val colorAsBackground: Boolean description The message/description displayed in the notification val description: String icon The icon displayed in the notification val icon: Bitmap ? id The unique identifier for the displayed notification val id: Int showPause Whether to add a notification action for pause/resume of the current recording (visible action is dependent on the state of the current recording session). val showPause: Boolean showStop Whether to add a notification action for stopping the current recording. val showStop: Boolean showTimer Whether to add a the current recording time to the notification via a chronometer. val showTimer: Boolean title The title displayed in the notification val title: String useMediaStyle Whether to have pause/resume and stop actions show as media style icons val useMediaStyle: Boolean","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/-init-/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / <init> <init> \u00b6 NotificationConfig(title: String = \"Recording screen\", description: String = \"\", icon: Bitmap ? = null, id: Int = 101, showStop: Boolean = false, showPause: Boolean = false, showTimer: Boolean = false, useMediaStyle: Boolean = false, @ColorRes accentColor: Int = R.color.recorder_notification_background, colorAsBackground: Boolean = true, channel: ChannelConfig = ChannelConfig()) An immutable data class representing configuration options for the notification presented from the foreground service.","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/-init-/#init","text":"NotificationConfig(title: String = \"Recording screen\", description: String = \"\", icon: Bitmap ? = null, id: Int = 101, showStop: Boolean = false, showPause: Boolean = false, showTimer: Boolean = false, useMediaStyle: Boolean = false, @ColorRes accentColor: Int = R.color.recorder_notification_background, colorAsBackground: Boolean = true, channel: ChannelConfig = ChannelConfig()) An immutable data class representing configuration options for the notification presented from the foreground service.","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/accent-color/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / accentColor accentColor \u00b6 val accentColor: Int The accent color resource for the notification NOTE: On Build.VERSION_CODES.M and below, this will set the background color of the notification and on Build.VERSION_CODES.N and above, will result as the accent color unless colorAsBackground is enabled. Defaults to Color.RED","title":"Accent color"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/accent-color/#accentcolor","text":"val accentColor: Int The accent color resource for the notification NOTE: On Build.VERSION_CODES.M and below, this will set the background color of the notification and on Build.VERSION_CODES.N and above, will result as the accent color unless colorAsBackground is enabled. Defaults to Color.RED","title":"accentColor"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/channel/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / channel channel \u00b6 val channel: ChannelConfig See Also ChannelConfig","title":"Channel"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/channel/#channel","text":"val channel: ChannelConfig See Also ChannelConfig","title":"channel"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/color-as-background/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / colorAsBackground colorAsBackground \u00b6 val colorAsBackground: Boolean When enabled the notification will use accentColor as the background.","title":"Color as background"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/color-as-background/#colorasbackground","text":"val colorAsBackground: Boolean When enabled the notification will use accentColor as the background.","title":"colorAsBackground"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/description/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / description description \u00b6 val description: String The message/description displayed in the notification See Also Notification.Builder.setContentText","title":"Description"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/description/#description","text":"val description: String The message/description displayed in the notification See Also Notification.Builder.setContentText","title":"description"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/icon/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / icon icon \u00b6 val icon: Bitmap ? The icon displayed in the notification See Also Notification.Builder.setSmallIcon","title":"Icon"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/icon/#icon","text":"val icon: Bitmap ? The icon displayed in the notification See Also Notification.Builder.setSmallIcon","title":"icon"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/id/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / id id \u00b6 val id: Int The unique identifier for the displayed notification See Also NotificationManager.notify","title":"Id"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/id/#id","text":"val id: Int The unique identifier for the displayed notification See Also NotificationManager.notify","title":"id"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/show-pause/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / showPause showPause \u00b6 val showPause: Boolean Whether to add a notification action for pause/resume of the current recording (visible action is dependent on the state of the current recording session). NOTE: This option will only make an effect on Build.VERSION_CODES.N and above","title":"Show pause"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/show-pause/#showpause","text":"val showPause: Boolean Whether to add a notification action for pause/resume of the current recording (visible action is dependent on the state of the current recording session). NOTE: This option will only make an effect on Build.VERSION_CODES.N and above","title":"showPause"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/show-stop/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / showStop showStop \u00b6 val showStop: Boolean Whether to add a notification action for stopping the current recording.","title":"Show stop"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/show-stop/#showstop","text":"val showStop: Boolean Whether to add a notification action for stopping the current recording.","title":"showStop"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/show-timer/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / showTimer showTimer \u00b6 val showTimer: Boolean Whether to add a the current recording time to the notification via a chronometer. See Also Notification.Builder.setUsesChronometer","title":"Show timer"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/show-timer/#showtimer","text":"val showTimer: Boolean Whether to add a the current recording time to the notification via a chronometer. See Also Notification.Builder.setUsesChronometer","title":"showTimer"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/title/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / title title \u00b6 val title: String The title displayed in the notification See Also Notification.Builder.setContentTitle","title":"Title"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/title/#title","text":"val title: String The title displayed in the notification See Also Notification.Builder.setContentTitle","title":"title"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/use-media-style/","text":"library / dev.bmcreations.scrcast.config / NotificationConfig / useMediaStyle useMediaStyle \u00b6 val useMediaStyle: Boolean Whether to have pause/resume and stop actions show as media style icons","title":"Use media style"},{"location":"api/library/dev.bmcreations.scrcast.config/-notification-config/use-media-style/#usemediastyle","text":"val useMediaStyle: Boolean Whether to have pause/resume and stop actions show as media style icons","title":"useMediaStyle"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/","text":"library / dev.bmcreations.scrcast.config / Options Options \u00b6 data class Options : Parcelable An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. See Also ScrCast.options Constructors \u00b6 Name Summary <init> An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. Options(video: VideoConfig = VideoConfig(), storage: StorageConfig = StorageConfig(), notification: NotificationConfig = NotificationConfig(), moveTaskToBack: Boolean = false, startDelayMs: Long = 0, stopOnScreenOff: Boolean = false) Properties \u00b6 Name Summary moveTaskToBack If the activity task should be moved the back once video starts recording. Defaults to false. val moveTaskToBack: Boolean notification val notification: NotificationConfig startDelayMs The time (in milliseconds) to delay the recording after calling ScrCast.record . val startDelayMs: Long stopOnScreenOff If enabled, any current in-progress recording session will be ending once the device screen is turned off. val stopOnScreenOff: Boolean storage val storage: StorageConfig video val video: VideoConfig","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/#options","text":"data class Options : Parcelable An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. See Also ScrCast.options","title":"Options"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/#constructors","text":"Name Summary <init> An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. Options(video: VideoConfig = VideoConfig(), storage: StorageConfig = StorageConfig(), notification: NotificationConfig = NotificationConfig(), moveTaskToBack: Boolean = false, startDelayMs: Long = 0, stopOnScreenOff: Boolean = false)","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/#properties","text":"Name Summary moveTaskToBack If the activity task should be moved the back once video starts recording. Defaults to false. val moveTaskToBack: Boolean notification val notification: NotificationConfig startDelayMs The time (in milliseconds) to delay the recording after calling ScrCast.record . val startDelayMs: Long stopOnScreenOff If enabled, any current in-progress recording session will be ending once the device screen is turned off. val stopOnScreenOff: Boolean storage val storage: StorageConfig video val video: VideoConfig","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/-init-/","text":"library / dev.bmcreations.scrcast.config / Options / <init> <init> \u00b6 Options(video: VideoConfig = VideoConfig(), storage: StorageConfig = StorageConfig(), notification: NotificationConfig = NotificationConfig(), moveTaskToBack: Boolean = false, startDelayMs: Long = 0, stopOnScreenOff: Boolean = false) An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. See Also ScrCast.options","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.config/-options/-init-/#init","text":"Options(video: VideoConfig = VideoConfig(), storage: StorageConfig = StorageConfig(), notification: NotificationConfig = NotificationConfig(), moveTaskToBack: Boolean = false, startDelayMs: Long = 0, stopOnScreenOff: Boolean = false) An immutable data object representing the Available configuration options for storage, recording, and providing user interaction with the screen recording. See Also ScrCast.options","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/move-task-to-back/","text":"library / dev.bmcreations.scrcast.config / Options / moveTaskToBack moveTaskToBack \u00b6 val moveTaskToBack: Boolean If the activity task should be moved the back once video starts recording. Defaults to false.","title":"Move task to back"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/move-task-to-back/#movetasktoback","text":"val moveTaskToBack: Boolean If the activity task should be moved the back once video starts recording. Defaults to false.","title":"moveTaskToBack"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/notification/","text":"library / dev.bmcreations.scrcast.config / Options / notification notification \u00b6 val notification: NotificationConfig See Also NotificationConfig","title":"Notification"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/notification/#notification","text":"val notification: NotificationConfig See Also NotificationConfig","title":"notification"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/start-delay-ms/","text":"library / dev.bmcreations.scrcast.config / Options / startDelayMs startDelayMs \u00b6 val startDelayMs: Long The time (in milliseconds) to delay the recording after calling ScrCast.record . Will emit RecordingState.Delay with a countdown from startDelayMs down to zero (in seconds). See Also RecordingState RecordingCallbacks","title":"Start delay ms"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/start-delay-ms/#startdelayms","text":"val startDelayMs: Long The time (in milliseconds) to delay the recording after calling ScrCast.record . Will emit RecordingState.Delay with a countdown from startDelayMs down to zero (in seconds). See Also RecordingState RecordingCallbacks","title":"startDelayMs"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/stop-on-screen-off/","text":"library / dev.bmcreations.scrcast.config / Options / stopOnScreenOff stopOnScreenOff \u00b6 val stopOnScreenOff: Boolean If enabled, any current in-progress recording session will be ending once the device screen is turned off.","title":"Stop on screen off"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/stop-on-screen-off/#stoponscreenoff","text":"val stopOnScreenOff: Boolean If enabled, any current in-progress recording session will be ending once the device screen is turned off.","title":"stopOnScreenOff"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/storage/","text":"library / dev.bmcreations.scrcast.config / Options / storage storage \u00b6 val storage: StorageConfig See Also StorageConfig","title":"Storage"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/storage/#storage","text":"val storage: StorageConfig See Also StorageConfig","title":"storage"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/video/","text":"library / dev.bmcreations.scrcast.config / Options / video video \u00b6 val video: VideoConfig See Also VideoConfig","title":"Video"},{"location":"api/library/dev.bmcreations.scrcast.config/-options/video/#video","text":"val video: VideoConfig See Also VideoConfig","title":"video"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/","text":"library / dev.bmcreations.scrcast.config / StorageConfig StorageConfig \u00b6 data class StorageConfig : Parcelable An immutable data class representing configuration options for the storage of the output file. Constructors \u00b6 Name Summary <init> An immutable data class representing configuration options for the storage of the output file. StorageConfig(directoryName: String = \"scrcast\", directory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), fileNameFormatter: FileFormatter = { SimpleDateFormat(\"MM_dd_yyyy_hhmmss\", Locale.getDefault()).format(Date()) }, outputFormat: Int = MediaRecorder.OutputFormat.MPEG_4, maxSizeMB: Float = 0f) Properties \u00b6 Name Summary directory The parent directory for all storage operations Will end up being located at mediaStorageLocation / fileNameFormatter val directory: File directoryName The directory name for this recording to be stored in. Will end up being located at mediaStorageLocation / fileNameFormatter val directoryName: String fileNameFormatter the formatting of the file name for the resulting screen recording. This is done via a higher order lambda in Kotlin and a FunctionN to ensure the formatter will run for each recording independently of one another. val fileNameFormatter: FileFormatter maxSizeMB Defines the maximum size (in MB) desired for the recording. If the recording session hits this defined size limit, the recording will auto end. val maxSizeMB: Float mediaStorageLocation The resulting directory location of the screen recordings, derived from directory and directoryName val mediaStorageLocation: File ? outputFormat The resulting video format of the screen recording file. val outputFormat: Int","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/#storageconfig","text":"data class StorageConfig : Parcelable An immutable data class representing configuration options for the storage of the output file.","title":"StorageConfig"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/#constructors","text":"Name Summary <init> An immutable data class representing configuration options for the storage of the output file. StorageConfig(directoryName: String = \"scrcast\", directory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), fileNameFormatter: FileFormatter = { SimpleDateFormat(\"MM_dd_yyyy_hhmmss\", Locale.getDefault()).format(Date()) }, outputFormat: Int = MediaRecorder.OutputFormat.MPEG_4, maxSizeMB: Float = 0f)","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/#properties","text":"Name Summary directory The parent directory for all storage operations Will end up being located at mediaStorageLocation / fileNameFormatter val directory: File directoryName The directory name for this recording to be stored in. Will end up being located at mediaStorageLocation / fileNameFormatter val directoryName: String fileNameFormatter the formatting of the file name for the resulting screen recording. This is done via a higher order lambda in Kotlin and a FunctionN to ensure the formatter will run for each recording independently of one another. val fileNameFormatter: FileFormatter maxSizeMB Defines the maximum size (in MB) desired for the recording. If the recording session hits this defined size limit, the recording will auto end. val maxSizeMB: Float mediaStorageLocation The resulting directory location of the screen recordings, derived from directory and directoryName val mediaStorageLocation: File ? outputFormat The resulting video format of the screen recording file. val outputFormat: Int","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/-init-/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / <init> <init> \u00b6 StorageConfig(directoryName: String = \"scrcast\", directory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), fileNameFormatter: FileFormatter = { SimpleDateFormat(\"MM_dd_yyyy_hhmmss\", Locale.getDefault()).format(Date()) }, outputFormat: Int = MediaRecorder.OutputFormat.MPEG_4, maxSizeMB: Float = 0f) An immutable data class representing configuration options for the storage of the output file.","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/-init-/#init","text":"StorageConfig(directoryName: String = \"scrcast\", directory: File = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES), fileNameFormatter: FileFormatter = { SimpleDateFormat(\"MM_dd_yyyy_hhmmss\", Locale.getDefault()).format(Date()) }, outputFormat: Int = MediaRecorder.OutputFormat.MPEG_4, maxSizeMB: Float = 0f) An immutable data class representing configuration options for the storage of the output file.","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/directory-name/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / directoryName directoryName \u00b6 val directoryName: String The directory name for this recording to be stored in. Will end up being located at mediaStorageLocation / fileNameFormatter See Also mediaStorageLocation fileNameFormatter","title":"Directory name"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/directory-name/#directoryname","text":"val directoryName: String The directory name for this recording to be stored in. Will end up being located at mediaStorageLocation / fileNameFormatter See Also mediaStorageLocation fileNameFormatter","title":"directoryName"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/directory/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / directory directory \u00b6 val directory: File The parent directory for all storage operations Will end up being located at mediaStorageLocation / fileNameFormatter See Also mediaStorageLocation fileNameFormatter","title":"Directory"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/directory/#directory","text":"val directory: File The parent directory for all storage operations Will end up being located at mediaStorageLocation / fileNameFormatter See Also mediaStorageLocation fileNameFormatter","title":"directory"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/file-name-formatter/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / fileNameFormatter fileNameFormatter \u00b6 val fileNameFormatter: FileFormatter the formatting of the file name for the resulting screen recording. This is done via a higher order lambda in Kotlin and a FunctionN to ensure the formatter will run for each recording independently of one another. Defaults to the current time in MM_dd_yyyy_hhmmss format. Will end up being located at mediaStorageLocation / fileNameFormatter See Also mediaStorageLocation","title":"File name formatter"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/file-name-formatter/#filenameformatter","text":"val fileNameFormatter: FileFormatter the formatting of the file name for the resulting screen recording. This is done via a higher order lambda in Kotlin and a FunctionN to ensure the formatter will run for each recording independently of one another. Defaults to the current time in MM_dd_yyyy_hhmmss format. Will end up being located at mediaStorageLocation / fileNameFormatter See Also mediaStorageLocation","title":"fileNameFormatter"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/max-size-m-b/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / maxSizeMB maxSizeMB \u00b6 val maxSizeMB: Float Defines the maximum size (in MB) desired for the recording. If the recording session hits this defined size limit, the recording will auto end. See Also MediaRecorder.setMaxFileSize","title":"Max size m b"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/max-size-m-b/#maxsizemb","text":"val maxSizeMB: Float Defines the maximum size (in MB) desired for the recording. If the recording session hits this defined size limit, the recording will auto end. See Also MediaRecorder.setMaxFileSize","title":"maxSizeMB"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/media-storage-location/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / mediaStorageLocation mediaStorageLocation \u00b6 val mediaStorageLocation: File ? The resulting directory location of the screen recordings, derived from directory and directoryName See Also directory directoryName","title":"Media storage location"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/media-storage-location/#mediastoragelocation","text":"val mediaStorageLocation: File ? The resulting directory location of the screen recordings, derived from directory and directoryName See Also directory directoryName","title":"mediaStorageLocation"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/output-format/","text":"library / dev.bmcreations.scrcast.config / StorageConfig / outputFormat outputFormat \u00b6 val outputFormat: Int The resulting video format of the screen recording file. See Also MediaRecorder.OutputFormat","title":"Output format"},{"location":"api/library/dev.bmcreations.scrcast.config/-storage-config/output-format/#outputformat","text":"val outputFormat: Int The resulting video format of the screen recording file. See Also MediaRecorder.OutputFormat","title":"outputFormat"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/","text":"library / dev.bmcreations.scrcast.config / VideoConfig VideoConfig \u00b6 data class VideoConfig : Parcelable An immutable data class representing configuration options for the recording. Constructors \u00b6 Name Summary <init> An immutable data class representing configuration options for the recording. VideoConfig(width: Int = -1, height: Int = -1, videoEncoder: Int = MediaRecorder.VideoEncoder.H264, bitrate: Int = 8_000_000, frameRate: Int = 60, maxLengthSecs: Int = 0) Properties \u00b6 Name Summary bitrate Defines the video bitrate to be used for the recording. val bitrate: Int frameRate Defines the video frame rate to be used for the recording. val frameRate: Int height Height of the video recording frame. val height: Int maxLengthSecs Defines the maximum length of time (in seconds) desired for the recording. If the recording session hits this defined time limit, the recording will auto end. val maxLengthSecs: Int videoEncoder Defines the video encoding to be used for the recording. val videoEncoder: Int width Width of the video recording frame. val width: Int","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/#videoconfig","text":"data class VideoConfig : Parcelable An immutable data class representing configuration options for the recording.","title":"VideoConfig"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/#constructors","text":"Name Summary <init> An immutable data class representing configuration options for the recording. VideoConfig(width: Int = -1, height: Int = -1, videoEncoder: Int = MediaRecorder.VideoEncoder.H264, bitrate: Int = 8_000_000, frameRate: Int = 60, maxLengthSecs: Int = 0)","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/#properties","text":"Name Summary bitrate Defines the video bitrate to be used for the recording. val bitrate: Int frameRate Defines the video frame rate to be used for the recording. val frameRate: Int height Height of the video recording frame. val height: Int maxLengthSecs Defines the maximum length of time (in seconds) desired for the recording. If the recording session hits this defined time limit, the recording will auto end. val maxLengthSecs: Int videoEncoder Defines the video encoding to be used for the recording. val videoEncoder: Int width Width of the video recording frame. val width: Int","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/-init-/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / <init> <init> \u00b6 VideoConfig(width: Int = -1, height: Int = -1, videoEncoder: Int = MediaRecorder.VideoEncoder.H264, bitrate: Int = 8_000_000, frameRate: Int = 60, maxLengthSecs: Int = 0) An immutable data class representing configuration options for the recording.","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/-init-/#init","text":"VideoConfig(width: Int = -1, height: Int = -1, videoEncoder: Int = MediaRecorder.VideoEncoder.H264, bitrate: Int = 8_000_000, frameRate: Int = 60, maxLengthSecs: Int = 0) An immutable data class representing configuration options for the recording.","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/bitrate/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / bitrate bitrate \u00b6 val bitrate: Int Defines the video bitrate to be used for the recording. A higher bitrate will result in a better quality recording, but will also result in a larger output file. See Also MediaRecorder.setVideoEncodingBitRate","title":"Bitrate"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/bitrate/#bitrate","text":"val bitrate: Int Defines the video bitrate to be used for the recording. A higher bitrate will result in a better quality recording, but will also result in a larger output file. See Also MediaRecorder.setVideoEncodingBitRate","title":"bitrate"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/frame-rate/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / frameRate frameRate \u00b6 val frameRate: Int Defines the video frame rate to be used for the recording. A higher frame rate will result in a smoother recording, but will also result in a larger output file. See Also MediaRecorder.setVideoFrameRate","title":"Frame rate"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/frame-rate/#framerate","text":"val frameRate: Int Defines the video frame rate to be used for the recording. A higher frame rate will result in a smoother recording, but will also result in a larger output file. See Also MediaRecorder.setVideoFrameRate","title":"frameRate"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/height/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / height height \u00b6 val height: Int Height of the video recording frame. A value of -1 will allow ScrCast to query the DisplayMetrics.heightPixels from the device for use. See Also MediaRecorder.setVideoSize","title":"Height"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/height/#height","text":"val height: Int Height of the video recording frame. A value of -1 will allow ScrCast to query the DisplayMetrics.heightPixels from the device for use. See Also MediaRecorder.setVideoSize","title":"height"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/max-length-secs/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / maxLengthSecs maxLengthSecs \u00b6 val maxLengthSecs: Int Defines the maximum length of time (in seconds) desired for the recording. If the recording session hits this defined time limit, the recording will auto end. See Also MediaRecorder.setMaxDuration","title":"Max length secs"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/max-length-secs/#maxlengthsecs","text":"val maxLengthSecs: Int Defines the maximum length of time (in seconds) desired for the recording. If the recording session hits this defined time limit, the recording will auto end. See Also MediaRecorder.setMaxDuration","title":"maxLengthSecs"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/video-encoder/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / videoEncoder videoEncoder \u00b6 val videoEncoder: Int Defines the video encoding to be used for the recording. See Also MediaRecorder.VideoEncoder MediaRecorder.setVideoEncoder MediaRecorder.setVideoSize","title":"Video encoder"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/video-encoder/#videoencoder","text":"val videoEncoder: Int Defines the video encoding to be used for the recording. See Also MediaRecorder.VideoEncoder MediaRecorder.setVideoEncoder MediaRecorder.setVideoSize","title":"videoEncoder"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/width/","text":"library / dev.bmcreations.scrcast.config / VideoConfig / width width \u00b6 val width: Int Width of the video recording frame. A value of -1 will allow ScrCast to query the DisplayMetrics.widthPixels from the device for use. See Also MediaRecorder.setVideoSize","title":"Width"},{"location":"api/library/dev.bmcreations.scrcast.config/-video-config/width/#width","text":"val width: Int Width of the video recording frame. A value of -1 will allow ScrCast to query the DisplayMetrics.widthPixels from the device for use. See Also MediaRecorder.setVideoSize","title":"width"},{"location":"api/library/dev.bmcreations.scrcast.extensions/","text":"library / dev.bmcreations.scrcast.extensions Package dev.bmcreations.scrcast.extensions \u00b6 Properties \u00b6 Name Summary supportsPauseResume Whether the target device supports pause and resume operations via MediaRecorder (e.g the device API level is Build.VERSION_CODES.N or higher) val supportsPauseResume: Boolean","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.extensions/#package-devbmcreationsscrcastextensions","text":"","title":"Package dev.bmcreations.scrcast.extensions"},{"location":"api/library/dev.bmcreations.scrcast.extensions/#properties","text":"Name Summary supportsPauseResume Whether the target device supports pause and resume operations via MediaRecorder (e.g the device API level is Build.VERSION_CODES.N or higher) val supportsPauseResume: Boolean","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.extensions/supports-pause-resume/","text":"library / dev.bmcreations.scrcast.extensions / supportsPauseResume supportsPauseResume \u00b6 val supportsPauseResume: Boolean Whether the target device supports pause and resume operations via MediaRecorder (e.g the device API level is Build.VERSION_CODES.N or higher)","title":"Supports pause resume"},{"location":"api/library/dev.bmcreations.scrcast.extensions/supports-pause-resume/#supportspauseresume","text":"val supportsPauseResume: Boolean Whether the target device supports pause and resume operations via MediaRecorder (e.g the device API level is Build.VERSION_CODES.N or higher)","title":"supportsPauseResume"},{"location":"api/library/dev.bmcreations.scrcast.recorder/","text":"library / dev.bmcreations.scrcast.recorder Package dev.bmcreations.scrcast.recorder \u00b6 Types \u00b6 Name Summary RecordingCallbacks Callback for RecordingState changes during a recording session. interface RecordingCallbacks RecordingState Explicit defined state's during a recording session via ScrCast sealed class RecordingState","title":"recorder"},{"location":"api/library/dev.bmcreations.scrcast.recorder/#package-devbmcreationsscrcastrecorder","text":"","title":"Package dev.bmcreations.scrcast.recorder"},{"location":"api/library/dev.bmcreations.scrcast.recorder/#types","text":"Name Summary RecordingCallbacks Callback for RecordingState changes during a recording session. interface RecordingCallbacks RecordingState Explicit defined state's during a recording session via ScrCast sealed class RecordingState","title":"Types"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/","text":"library / dev.bmcreations.scrcast.recorder / RecordingCallbacks RecordingCallbacks \u00b6 interface RecordingCallbacks Callback for RecordingState changes during a recording session. See Also RecordingState ScrCast.setRecordingCallback Functions \u00b6 Name Summary onRecordingFinished abstract fun onRecordingFinished(file: File ): Unit onStateChange Triggered when the state changes for the current recording session. abstract fun onStateChange(state: RecordingState ): Unit","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/#recordingcallbacks","text":"interface RecordingCallbacks Callback for RecordingState changes during a recording session. See Also RecordingState ScrCast.setRecordingCallback","title":"RecordingCallbacks"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/#functions","text":"Name Summary onRecordingFinished abstract fun onRecordingFinished(file: File ): Unit onStateChange Triggered when the state changes for the current recording session. abstract fun onStateChange(state: RecordingState ): Unit","title":"Functions"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/on-recording-finished/","text":"library / dev.bmcreations.scrcast.recorder / RecordingCallbacks / onRecordingFinished onRecordingFinished \u00b6 abstract fun onRecordingFinished(file: File ): Unit","title":"On recording finished"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/on-recording-finished/#onrecordingfinished","text":"abstract fun onRecordingFinished(file: File ): Unit","title":"onRecordingFinished"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/on-state-change/","text":"library / dev.bmcreations.scrcast.recorder / RecordingCallbacks / onStateChange onStateChange \u00b6 abstract fun onStateChange(state: RecordingState ): Unit Triggered when the state changes for the current recording session.","title":"On state change"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-callbacks/on-state-change/#onstatechange","text":"abstract fun onStateChange(state: RecordingState ): Unit Triggered when the state changes for the current recording session.","title":"onStateChange"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState RecordingState \u00b6 sealed class RecordingState Explicit defined state's during a recording session via ScrCast Types \u00b6 Name Summary Delay Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null. data class Delay : RecordingState Idle Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. data class Idle : RecordingState Paused Defines when the session is in an active recording, but is currently paused object Paused : RecordingState Recording Defines when the session is in an active recording, non paused state object Recording : RecordingState Properties \u00b6 Name Summary isError Convenience state query for when the state is Idle and Idle.error is non-null (e.g in an error state) val isError: Boolean isIdle Convenience state query for when the state is Idle and Idle.error is null (e.g not in an error state) val isIdle: Boolean isInStartDelay Convenience state query for when the state is Delay val isInStartDelay: Boolean isPaused Convenience state query for when the state is Paused val isPaused: Boolean isRecording Convenience state query for when the state is Recording val isRecording: Boolean","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/#recordingstate","text":"sealed class RecordingState Explicit defined state's during a recording session via ScrCast","title":"RecordingState"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/#types","text":"Name Summary Delay Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null. data class Delay : RecordingState Idle Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. data class Idle : RecordingState Paused Defines when the session is in an active recording, but is currently paused object Paused : RecordingState Recording Defines when the session is in an active recording, non paused state object Recording : RecordingState","title":"Types"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/#properties","text":"Name Summary isError Convenience state query for when the state is Idle and Idle.error is non-null (e.g in an error state) val isError: Boolean isIdle Convenience state query for when the state is Idle and Idle.error is null (e.g not in an error state) val isIdle: Boolean isInStartDelay Convenience state query for when the state is Delay val isInStartDelay: Boolean isPaused Convenience state query for when the state is Paused val isPaused: Boolean isRecording Convenience state query for when the state is Recording val isRecording: Boolean","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-paused/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Paused Paused \u00b6 object Paused : RecordingState Defines when the session is in an active recording, but is currently paused","title":" paused"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-paused/#paused","text":"object Paused : RecordingState Defines when the session is in an active recording, but is currently paused","title":"Paused"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-recording/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Recording Recording \u00b6 object Recording : RecordingState Defines when the session is in an active recording, non paused state","title":" recording"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-recording/#recording","text":"object Recording : RecordingState Defines when the session is in an active recording, non paused state","title":"Recording"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-error/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / isError isError \u00b6 val isError: Boolean Convenience state query for when the state is Idle and Idle.error is non-null (e.g in an error state)","title":"Is error"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-error/#iserror","text":"val isError: Boolean Convenience state query for when the state is Idle and Idle.error is non-null (e.g in an error state)","title":"isError"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-idle/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / isIdle isIdle \u00b6 val isIdle: Boolean Convenience state query for when the state is Idle and Idle.error is null (e.g not in an error state)","title":"Is idle"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-idle/#isidle","text":"val isIdle: Boolean Convenience state query for when the state is Idle and Idle.error is null (e.g not in an error state)","title":"isIdle"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-in-start-delay/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / isInStartDelay isInStartDelay \u00b6 val isInStartDelay: Boolean Convenience state query for when the state is Delay","title":"Is in start delay"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-in-start-delay/#isinstartdelay","text":"val isInStartDelay: Boolean Convenience state query for when the state is Delay","title":"isInStartDelay"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-paused/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / isPaused isPaused \u00b6 val isPaused: Boolean Convenience state query for when the state is Paused","title":"Is paused"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-paused/#ispaused","text":"val isPaused: Boolean Convenience state query for when the state is Paused","title":"isPaused"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-recording/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / isRecording isRecording \u00b6 val isRecording: Boolean Convenience state query for when the state is Recording","title":"Is recording"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/is-recording/#isrecording","text":"val isRecording: Boolean Convenience state query for when the state is Recording","title":"isRecording"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Delay Delay \u00b6 data class Delay : RecordingState Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null. Constructors \u00b6 Name Summary <init> Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null. Delay(remainingSeconds: Int ) Properties \u00b6 Name Summary remainingSeconds Number of remaining seconds until the session is attempted to be started val remainingSeconds: Int","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/#delay","text":"data class Delay : RecordingState Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null.","title":"Delay"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/#constructors","text":"Name Summary <init> Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null. Delay(remainingSeconds: Int )","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/#properties","text":"Name Summary remainingSeconds Number of remaining seconds until the session is attempted to be started val remainingSeconds: Int","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/-init-/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Delay / <init> <init> \u00b6 Delay(remainingSeconds: Int ) Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null.","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/-init-/#init","text":"Delay(remainingSeconds: Int ) Defines when the session is in a non idle, start is currently in a \"start delay\", with the count of remaining seconds until the start is transferred to either Recording if the session successfully starts, or to Idle with Idle.error being non-null.","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/remaining-seconds/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Delay / remainingSeconds remainingSeconds \u00b6 val remainingSeconds: Int Number of remaining seconds until the session is attempted to be started","title":"Remaining seconds"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-delay/remaining-seconds/#remainingseconds","text":"val remainingSeconds: Int Number of remaining seconds until the session is attempted to be started","title":"remainingSeconds"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Idle Idle \u00b6 data class Idle : RecordingState Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. If it's idle become of an error, error will be non-null. Constructors \u00b6 Name Summary <init> Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. Idle(error: Throwable ? = null) Properties \u00b6 Name Summary error If this is non-null, we are Idle due to an error val error: Throwable ?","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/#idle","text":"data class Idle : RecordingState Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. If it's idle become of an error, error will be non-null.","title":"Idle"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/#constructors","text":"Name Summary <init> Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. Idle(error: Throwable ? = null)","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/#properties","text":"Name Summary error If this is non-null, we are Idle due to an error val error: Throwable ?","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/-init-/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Idle / <init> <init> \u00b6 Idle(error: Throwable ? = null) Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. If it's idle become of an error, error will be non-null.","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/-init-/#init","text":"Idle(error: Throwable ? = null) Defines when the session is idle, either before a first session has started, after a session has ended, or when an error has occurred. If it's idle become of an error, error will be non-null.","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/error/","text":"library / dev.bmcreations.scrcast.recorder / RecordingState / Idle / error error \u00b6 val error: Throwable ? If this is non-null, we are Idle due to an error","title":"Error"},{"location":"api/library/dev.bmcreations.scrcast.recorder/-recording-state/-idle/error/#error","text":"val error: Throwable ? If this is non-null, we are Idle due to an error","title":"error"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/","text":"library / dev.bmcreations.scrcast.recorder.notification Package dev.bmcreations.scrcast.recorder.notification \u00b6 Types \u00b6 Name Summary NotificationProvider Provider contract for managing the recording notification used by ScrCast abstract class NotificationProvider","title":"notifications"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/#package-devbmcreationsscrcastrecordernotification","text":"","title":"Package dev.bmcreations.scrcast.recorder.notification"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/#types","text":"Name Summary NotificationProvider Provider contract for managing the recording notification used by ScrCast abstract class NotificationProvider","title":"Types"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider NotificationProvider \u00b6 abstract class NotificationProvider Provider contract for managing the recording notification used by ScrCast Constructors \u00b6 Name Summary <init> Provider contract for managing the recording notification used by ScrCast NotificationProvider(context: Context ) Properties \u00b6 Name Summary notificationManager NotificationManager instantiated via the provided Context , available to subclasses for NotificationManager.notify and other purposes val notificationManager: NotificationManager Functions \u00b6 Name Summary createNotificationChannel Required method for subclasses to define their own NotificationChannel abstract fun createNotificationChannel(): Unit get Required method for subclasses to provide their Notification to the recording service. abstract fun get(state: RecordingState ): Notification getChannelId Required method for subclasses to define their NotificationChannel unique identifier. abstract fun getChannelId(): String getNotificationId Required method for subclasses to define their Notification unique identifier, queried by update to update the notification on state changes if required. abstract fun getNotificationId(): Int update Updates the current notification based on the new RecordingState . open fun update(state: RecordingState ): Unit","title":"Index"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/#notificationprovider","text":"abstract class NotificationProvider Provider contract for managing the recording notification used by ScrCast","title":"NotificationProvider"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/#constructors","text":"Name Summary <init> Provider contract for managing the recording notification used by ScrCast NotificationProvider(context: Context )","title":"Constructors"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/#properties","text":"Name Summary notificationManager NotificationManager instantiated via the provided Context , available to subclasses for NotificationManager.notify and other purposes val notificationManager: NotificationManager","title":"Properties"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/#functions","text":"Name Summary createNotificationChannel Required method for subclasses to define their own NotificationChannel abstract fun createNotificationChannel(): Unit get Required method for subclasses to provide their Notification to the recording service. abstract fun get(state: RecordingState ): Notification getChannelId Required method for subclasses to define their NotificationChannel unique identifier. abstract fun getChannelId(): String getNotificationId Required method for subclasses to define their Notification unique identifier, queried by update to update the notification on state changes if required. abstract fun getNotificationId(): Int update Updates the current notification based on the new RecordingState . open fun update(state: RecordingState ): Unit","title":"Functions"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/-init-/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / <init> <init> \u00b6 NotificationProvider(context: Context ) Provider contract for managing the recording notification used by ScrCast","title":" init "},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/-init-/#init","text":"NotificationProvider(context: Context ) Provider contract for managing the recording notification used by ScrCast","title":"&lt;init&gt;"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/create-notification-channel/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / createNotificationChannel createNotificationChannel \u00b6 abstract fun createNotificationChannel(): Unit Required method for subclasses to define their own NotificationChannel","title":"Create notification channel"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/create-notification-channel/#createnotificationchannel","text":"abstract fun createNotificationChannel(): Unit Required method for subclasses to define their own NotificationChannel","title":"createNotificationChannel"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/get-channel-id/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / getChannelId getChannelId \u00b6 abstract fun getChannelId(): String Required method for subclasses to define their NotificationChannel unique identifier.","title":"Get channel id"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/get-channel-id/#getchannelid","text":"abstract fun getChannelId(): String Required method for subclasses to define their NotificationChannel unique identifier.","title":"getChannelId"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/get-notification-id/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / getNotificationId getNotificationId \u00b6 abstract fun getNotificationId(): Int Required method for subclasses to define their Notification unique identifier, queried by update to update the notification on state changes if required.","title":"Get notification id"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/get-notification-id/#getnotificationid","text":"abstract fun getNotificationId(): Int Required method for subclasses to define their Notification unique identifier, queried by update to update the notification on state changes if required.","title":"getNotificationId"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/get/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / get get \u00b6 abstract fun get(state: RecordingState ): Notification Required method for subclasses to provide their Notification to the recording service.","title":"Get"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/get/#get","text":"abstract fun get(state: RecordingState ): Notification Required method for subclasses to provide their Notification to the recording service.","title":"get"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/notification-manager/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / notificationManager notificationManager \u00b6 protected val notificationManager: NotificationManager NotificationManager instantiated via the provided Context , available to subclasses for NotificationManager.notify and other purposes Getter NotificationManager instantiated via the provided Context , available to subclasses for NotificationManager.notify and other purposes","title":"Notification manager"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/notification-manager/#notificationmanager","text":"protected val notificationManager: NotificationManager NotificationManager instantiated via the provided Context , available to subclasses for NotificationManager.notify and other purposes Getter NotificationManager instantiated via the provided Context , available to subclasses for NotificationManager.notify and other purposes","title":"notificationManager"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/update/","text":"library / dev.bmcreations.scrcast.recorder.notification / NotificationProvider / update update \u00b6 open fun update(state: RecordingState ): Unit Updates the current notification based on the new RecordingState . Can be overridden to handle internal events related to your Notification . (e.g handle timer during pause/resume)","title":"Update"},{"location":"api/library/dev.bmcreations.scrcast.recorder.notification/-notification-provider/update/#update","text":"open fun update(state: RecordingState ): Unit Updates the current notification based on the new RecordingState . Can be overridden to handle internal events related to your Notification . (e.g handle timer during pause/resume)","title":"update"},{"location":"api/lifecycle/","text":"lifecycle Packages \u00b6 Name Summary dev.bmcreations.scrcast.lifecycle Index \u00b6 All Types","title":"Index"},{"location":"api/lifecycle/#packages","text":"Name Summary dev.bmcreations.scrcast.lifecycle","title":"Packages"},{"location":"api/lifecycle/#index","text":"All Types","title":"Index"},{"location":"api/lifecycle/alltypes/","text":"All Types \u00b6 Name Summary (extensions in package dev.bmcreations.scrcast.lifecycle) dev.bmcreations.scrcast.ScrCast \u00b6 | dev.bmcreations.scrcast.lifecycle.ScrCastLifecycleObserver \u00b6","title":"Index"},{"location":"api/lifecycle/alltypes/#all-types","text":"Name Summary (extensions in package dev.bmcreations.scrcast.lifecycle)","title":"All Types"},{"location":"api/lifecycle/alltypes/#devbmcreationsscrcastscrcast","text":"|","title":"dev.bmcreations.scrcast.ScrCast"},{"location":"api/lifecycle/alltypes/#devbmcreationsscrcastlifecyclescrcastlifecycleobserver","text":"","title":"dev.bmcreations.scrcast.lifecycle.ScrCastLifecycleObserver"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/","text":"lifecycle / dev.bmcreations.scrcast.lifecycle Package dev.bmcreations.scrcast.lifecycle \u00b6 Types \u00b6 Name Summary ScrCastLifecycleObserver class ScrCastLifecycleObserver Extensions for External Classes \u00b6 Name Summary dev.bmcreations.scrcast.ScrCast","title":"Index"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/#package-devbmcreationsscrcastlifecycle","text":"","title":"Package dev.bmcreations.scrcast.lifecycle"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/#types","text":"Name Summary ScrCastLifecycleObserver class ScrCastLifecycleObserver","title":"Types"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/#extensions-for-external-classes","text":"Name Summary dev.bmcreations.scrcast.ScrCast","title":"Extensions for External Classes"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/","text":"lifecycle / dev.bmcreations.scrcast.lifecycle / ScrCastLifecycleObserver ScrCastLifecycleObserver \u00b6 class ScrCastLifecycleObserver Constructors \u00b6 Name Summary <init> ScrCastLifecycleObserver() Companion Object Functions \u00b6 Name Summary observeRecordingState JVM accessible lifecycle observer for RecordingState using AndroidX lifecycle components fun observeRecordingState(recorder: ScrCast, lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit","title":"Index"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/#scrcastlifecycleobserver","text":"class ScrCastLifecycleObserver","title":"ScrCastLifecycleObserver"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/#constructors","text":"Name Summary <init> ScrCastLifecycleObserver()","title":"Constructors"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/#companion-object-functions","text":"Name Summary observeRecordingState JVM accessible lifecycle observer for RecordingState using AndroidX lifecycle components fun observeRecordingState(recorder: ScrCast, lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit","title":"Companion Object Functions"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/-init-/","text":"lifecycle / dev.bmcreations.scrcast.lifecycle / ScrCastLifecycleObserver / <init> <init> \u00b6 ScrCastLifecycleObserver()","title":" init "},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/-init-/#init","text":"ScrCastLifecycleObserver()","title":"&lt;init&gt;"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/observe-recording-state/","text":"lifecycle / dev.bmcreations.scrcast.lifecycle / ScrCastLifecycleObserver / observeRecordingState observeRecordingState \u00b6 @JvmStatic fun observeRecordingState(recorder: ScrCast, lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit JVM accessible lifecycle observer for RecordingState using AndroidX lifecycle components See Also LifecycleObserver","title":"Observe recording state"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/-scr-cast-lifecycle-observer/observe-recording-state/#observerecordingstate","text":"@JvmStatic fun observeRecordingState(recorder: ScrCast, lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit JVM accessible lifecycle observer for RecordingState using AndroidX lifecycle components See Also LifecycleObserver","title":"observeRecordingState"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/dev.bmcreations.scrcast.-scr-cast/","text":"lifecycle / dev.bmcreations.scrcast.lifecycle / dev.bmcreations.scrcast.ScrCast Extensions for dev.bmcreations.scrcast.ScrCast \u00b6 Name Summary observeRecordingState Lifecycle observer for RecordingState using AndroidX lifecycle components fun ScrCast.observeRecordingState(lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit","title":"Index"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/dev.bmcreations.scrcast.-scr-cast/#extensions-for-devbmcreationsscrcastscrcast","text":"Name Summary observeRecordingState Lifecycle observer for RecordingState using AndroidX lifecycle components fun ScrCast.observeRecordingState(lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit","title":"Extensions for dev.bmcreations.scrcast.ScrCast"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/dev.bmcreations.scrcast.-scr-cast/observe-recording-state/","text":"lifecycle / dev.bmcreations.scrcast.lifecycle / dev.bmcreations.scrcast.ScrCast / observeRecordingState observeRecordingState \u00b6 fun ScrCast.observeRecordingState(lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit Lifecycle observer for RecordingState using AndroidX lifecycle components See Also LifecycleObserver","title":"Observe recording state"},{"location":"api/lifecycle/dev.bmcreations.scrcast.lifecycle/dev.bmcreations.scrcast.-scr-cast/observe-recording-state/#observerecordingstate","text":"fun ScrCast.observeRecordingState(lifecycleOwner: LifecycleOwner, observer: Observer<RecordingState>): Unit Lifecycle observer for RecordingState using AndroidX lifecycle components See Also LifecycleObserver","title":"observeRecordingState"}]}